{"ast":null,"code":"import { ADD_TO_CART, DELETE_ITEM_FROM_CARD } from '../actions/types'; // []\n\nconst cartReducer = (state, action) => {\n  //initialize our state \n  if (state === undefined) {\n    state = {\n      cartItems: [],\n      //[{}]\n      numberOfItems: 0,\n      totalCost: parseFloat(0.00)\n    };\n  }\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      let newCartItems = [...state.cartItems]; //copying whatever is in state \n\n      let isFound = false; //if they have added item before\n\n      newCartItems.forEach(product => {\n        if (product.id === action.product.id) {\n          product.quantity++;\n          isFound = true;\n        }\n      }); //they added the dress for the first time\n\n      if (!isFound) {\n        newCartItems.push({ ...action.product,\n          quantity: 1\n        });\n      }\n\n      return { ...state,\n        cartItems: newCartItems,\n        numberOfItems: state.numberOfItems + 1,\n        totalCost: state.totalCost + parseFloat(action.product.price)\n      };\n\n    case DELETE_ITEM_FROM_CARD:\n      console.log(action.product);\n      let copyCartItems = [...state.cartItems]; //copying whatever is in state \n\n      let isOne = false;\n      copyCartItems.forEach(product => {\n        if (product.id === action.product && product.quantity > 1) {\n          product.quantity--;\n          isOne = true;\n        }\n      });\n\n      if (!isOne) {\n        copyCartItems = copyCartItems.filter(item => {\n          return item.id !== action.product;\n        });\n      }\n\n      return { ...state,\n        cartItems: copyCartItems,\n        numberOfItems: state.numberOfItems - 1,\n        totalCost: state.totalCost - parseFloat(action.product.price)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/veronica.t/Desktop/julyRepo/web-ft-07-2022/lectures/week13/1-Monday/MY-LectureNotes/hw-redux-shopping-cart/src/reducers/cartReducer.js"],"names":["ADD_TO_CART","DELETE_ITEM_FROM_CARD","cartReducer","state","action","undefined","cartItems","numberOfItems","totalCost","parseFloat","type","newCartItems","isFound","forEach","product","id","quantity","push","price","console","log","copyCartItems","isOne","filter","item"],"mappings":"AACA,SAASA,WAAT,EAAsBC,qBAAtB,QAAmD,kBAAnD,C,CACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEnC;AAEA,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrBF,IAAAA,KAAK,GAAG;AACJG,MAAAA,SAAS,EAAE,EADP;AACY;AAChBC,MAAAA,aAAa,EAAE,CAFX;AAGJC,MAAAA,SAAS,EAAEC,UAAU,CAAC,IAAD;AAHjB,KAAR;AAKH;;AAED,UAAQL,MAAM,CAACM,IAAf;AAEI,SAAKV,WAAL;AAEI,UAAIW,YAAY,GAAG,CAAC,GAAGR,KAAK,CAACG,SAAV,CAAnB,CAFJ,CAE4C;;AACxC,UAAIM,OAAO,GAAG,KAAd,CAHJ,CAII;;AACAD,MAAAA,YAAY,CAACE,OAAb,CAAqBC,OAAO,IAAI;AAC5B,YAAIA,OAAO,CAACC,EAAR,KAAeX,MAAM,CAACU,OAAP,CAAeC,EAAlC,EAAsC;AAClCD,UAAAA,OAAO,CAACE,QAAR;AACAJ,UAAAA,OAAO,GAAG,IAAV;AACH;AACJ,OALD,EALJ,CAWI;;AACA,UAAI,CAACA,OAAL,EAAc;AACVD,QAAAA,YAAY,CAACM,IAAb,CAAkB,EAAE,GAAGb,MAAM,CAACU,OAAZ;AAAqBE,UAAAA,QAAQ,EAAE;AAA/B,SAAlB;AACH;;AACD,aAAO,EACH,GAAGb,KADA;AAEHG,QAAAA,SAAS,EAAEK,YAFR;AAGHJ,QAAAA,aAAa,EAAEJ,KAAK,CAACI,aAAN,GAAsB,CAHlC;AAIHC,QAAAA,SAAS,EAAEL,KAAK,CAACK,SAAN,GAAkBC,UAAU,CAACL,MAAM,CAACU,OAAP,CAAeI,KAAhB;AAJpC,OAAP;;AAOJ,SAAKjB,qBAAL;AACIkB,MAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAM,CAACU,OAAnB;AACA,UAAIO,aAAa,GAAG,CAAC,GAAGlB,KAAK,CAACG,SAAV,CAApB,CAFJ,CAE6C;;AACzC,UAAIgB,KAAK,GAAC,KAAV;AACAD,MAAAA,aAAa,CAACR,OAAd,CAAsBC,OAAO,IAAI;AAC7B,YAAIA,OAAO,CAACC,EAAR,KAAeX,MAAM,CAACU,OAAtB,IAAiCA,OAAO,CAACE,QAAR,GAAkB,CAAvD,EAA0D;AACtDF,UAAAA,OAAO,CAACE,QAAR;AACAM,UAAAA,KAAK,GAAC,IAAN;AACH;AACJ,OALD;;AAMA,UAAI,CAACA,KAAL,EAAY;AACRD,QAAAA,aAAa,GAAEA,aAAa,CAACE,MAAd,CAAqBC,IAAI,IAAI;AACxC,iBAAOA,IAAI,CAACT,EAAL,KAAYX,MAAM,CAACU,OAA1B;AACH,SAFc,CAAf;AAGH;;AACD,aAAO,EACH,GAAGX,KADA;AAEHG,QAAAA,SAAS,EAAEe,aAFR;AAGHd,QAAAA,aAAa,EAAEJ,KAAK,CAACI,aAAN,GAAsB,CAHlC;AAIHC,QAAAA,SAAS,EAAEL,KAAK,CAACK,SAAN,GAAkBC,UAAU,CAACL,MAAM,CAACU,OAAP,CAAeI,KAAhB;AAJpC,OAAP;;AAQJ;AACI,aAAOf,KAAP;AAhDR;AAkDH,CA9DD;;AAiEA,eAAeD,WAAf","sourcesContent":["\nimport { ADD_TO_CART, DELETE_ITEM_FROM_CARD } from '../actions/types'\n// []\nconst cartReducer = (state, action) => {\n\n    //initialize our state \n\n    if (state === undefined) {\n        state = {\n            cartItems: [],  //[{}]\n            numberOfItems: 0,\n            totalCost: parseFloat(0.00)\n        }\n    }\n\n    switch (action.type) {\n\n        case ADD_TO_CART:\n\n            let newCartItems = [...state.cartItems] //copying whatever is in state \n            let isFound = false;\n            //if they have added item before\n            newCartItems.forEach(product => {\n                if (product.id === action.product.id) {\n                    product.quantity++;\n                    isFound = true;\n                }\n            })\n            //they added the dress for the first time\n            if (!isFound) {\n                newCartItems.push({ ...action.product, quantity: 1 })\n            }\n            return {\n                ...state,\n                cartItems: newCartItems,\n                numberOfItems: state.numberOfItems + 1,\n                totalCost: state.totalCost + parseFloat(action.product.price)\n\n            }\n        case DELETE_ITEM_FROM_CARD:\n            console.log(action.product);\n            let copyCartItems = [...state.cartItems] //copying whatever is in state \n            let isOne=false\n            copyCartItems.forEach(product => {\n                if (product.id === action.product && product.quantity >1) {\n                    product.quantity--;\n                    isOne=true\n                }\n            })\n            if (!isOne) {\n                copyCartItems= copyCartItems.filter(item => {\n                    return item.id !== action.product\n                })\n            }\n            return {\n                ...state,\n                cartItems: copyCartItems,\n                numberOfItems: state.numberOfItems - 1,\n                totalCost: state.totalCost - parseFloat(action.product.price)\n\n            }\n\n        default:\n            return state\n    }\n}\n\n\nexport default cartReducer"]},"metadata":{},"sourceType":"module"}